function [P] = local_projection_{{integration}}(X, Y, nodes, u, l, local_nodes)
  %local_stiffness Calculates the local projection vector for a given element
  % and its type, using an appropriate integration method.
  % NOTE: THIS IS GENERATED CODE. REFER TO local_projection.m.tmpl and generate.py
  if local_nodes == 4
    [P] = crunch_quad(X(1), X(2), X(3), X(4), ...
                      Y(1), Y(2), Y(3), Y(4), ...
                      nodes(1, 1), nodes(2, 1), nodes(3, 1), nodes(4, 1), ...
                      nodes(1, 2), nodes(2, 2), nodes(3, 2), nodes(4, 2), ...
                      u, l);
  elseif local_nodes == 8
    [P] = crunch_serindipity(X(1), X(2), X(3), X(4), ...
                           X(5), X(6), X(7), X(8), ...
                           Y(1), Y(2), Y(3), Y(4), ...
                           Y(5), Y(6), Y(7), Y(8), ...
                           nodes(1, 1), nodes(2, 1), nodes(3, 1), nodes(4, 1), ...
                           nodes(5, 1), nodes(6, 1), nodes(7, 1), nodes(8, 1), ...
                           nodes(1, 2), nodes(2, 2), nodes(3, 2), nodes(4, 2), ...
                           nodes(5, 2), nodes(6, 2), nodes(7, 2), nodes(8, 2), ...
                           u, l);
  else
    [P] = crunch_bubble(X(1), X(2), X(3), X(4), ...
                           X(5), X(6), X(7), X(8), X(9), ...
                           Y(1), Y(2), Y(3), Y(4), Y(5), ...
                           Y(6), Y(7), Y(8), Y(9), ...
                           nodes(1, 1), nodes(2, 1), nodes(3, 1), nodes(4, 1), ...
                           nodes(5, 1), nodes(6, 1), nodes(7, 1), nodes(8, 1), nodes(9, 1), ...
                           nodes(1, 2), nodes(2, 2), nodes(3, 2), nodes(4, 2), ...
                           nodes(5, 2), nodes(6, 2), nodes(7, 2), nodes(8, 2), nodes(9, 2), ...
                           u, l);
  end
end

function [P] = crunch_quad(A, B, C, D, ...
                           R, S, T, U, ...
                           d0X, d1X, d2X, d3X, ...
                           d0Y, d1Y, d2Y, d3Y, ...
                           u, l)
  {{{quad}}}
end

function [P] = crunch_serindipity(A, B, C, D, E, F, G, H, ...
                                  R, S, T, U, V, W, X, Y, ...
                                  d0X, d1X, d2X, d3X, d4X, d5X, d6X, d7X, ...
                                  d0Y, d1Y, d2Y, d3Y, d4Y, d5Y, d6Y, d7Y, ...
                                  u, l)
  {{{serindipity}}}
end

function [P] = crunch_bubble(A, B, C, D, E, F, G, H, I, ...
                             R, S, T, U, V, W, X, Y, Z, ...
                             d0X, d1X, d2X, d3X, d4X, d5X, d6X, d7X, d8X, ...
                             d0Y, d1Y, d2Y, d3Y, d4Y, d5Y, d6Y, d7Y, d8Y, ...
                             u, l)
  {{{bubble}}}
end
