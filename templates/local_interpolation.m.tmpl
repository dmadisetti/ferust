function [fn] = local_interpolation(X, Y, interp, local_nodes)
  %local_interpolation Returns a function that calculates the interpolation
  % value in a given element provided solved values at the nodes using the shape
  % functions.
  % NOTE: THIS IS GENERATED CODE. REFER TO local_stress.m.tmpl and generate.py
  if local_nodes == 4
    [fn] = crunch_quad(X(1), X(2), X(3), X(4), ...
                      Y(1), Y(2), Y(3), Y(4), ...
                      interp(1), interp(2), interp(3), interp(4));
  elseif local_nodes == 8
    [fn] = crunch_serindipity(X(1), X(2), X(3), X(4), ...
                           X(5), X(6), X(7), X(8), ...
                           Y(1), Y(2), Y(3), Y(4), ...
                           Y(5), Y(6), Y(7), Y(8), ...
                           interp(1), interp(2), interp(3), interp(4), ...
                           interp(5), interp(6), interp(7), interp(8));
  else
    [fn] = crunch_bubble(X(1), X(2), X(3), X(4), ...
                           X(5), X(6), X(7), X(8), X(9), ...
                           Y(1), Y(2), Y(3), Y(4), Y(5), ...
                           Y(6), Y(7), Y(8), Y(9), ...
                           interp(1), interp(2), interp(3), interp(4), ...
                           interp(5), interp(6), interp(7), interp(8), ...
                           interp(9));
  end
end

function [fn] = crunch_quad(A, B, C, D, ...
                           R, S, T, U, ...
                           d0, d1, d2, d3)
  {{{quad}}};
end

function [fn] = crunch_serindipity(A, B, C, D, E, F, G, H, ...
                                  R, S, T, U, V, W, X, Y, ...
                                  d0, d1, d2, d3, d4, d5, d6, d7)
  {{{serindipity}}};
end

function [fn] = crunch_bubble(A, B, C, D, E, F, G, H, I, ...
                             R, S, T, U, V, W, X, Y, Z, ...
                             d0, d1, d2, d3, d4, d5, d6, d7, d8)
  {{{bubble}}};
end
