function [K] = local_stiffness(X, Y, u, l, local_nodes)
  %local_stiffness Calculates the local stiffness for a given element and its
  % type, using an appropriate integration method.
  % NOTE: THIS IS GENERATED CODE. REFER TO local_stiffness.m.tmpl
  if local_nodes == 4
    K = crunch_quad(X(1), X(2), X(3), X(4), ...
                      Y(1), Y(2), Y(3), Y(4), u, l);
  else
    K = crunch_serindipity(X(1), X(2), X(3), X(4), ...
                           X(5), X(6), X(7), X(8), ...
                           Y(1), Y(2), Y(3), Y(4), ...
                           Y(5), Y(6), Y(7), Y(8), u, l);
  end
  K = K + triu(K, 1).';
end

function [K] = crunch_quad(A, B, C, D, S, T, U, V, u, l)
  K = [l*(A*(T/16 - U/48 - V/24) + B*(-S/16 + U/24 + V/48) + C*(S/48 - T/24 +  ...
    V/48) + D*(S/24 - T/48 - U/48)) + u*(A*(T/6 - U/48 - 7*V/48) + B*(-S/6 +  ...
    5*U/48 + V/16) + C*(S/48 - 5*T/48 + V/12) + D*(7*S/48 - T/16 - U/12)), l*(A ...
    *(T/24 - V/24) + B*(-S/24 + U/48 + V/48) + C*(-T/48 + V/48) + D*(S/24 - T/48 ...
     - U/48)) + u*(A*(T/24 - V/24) + B*(-S/24 + U/48 + V/48) + C*(-T/48 + V/48) ...
     + D*(S/24 - T/48 - U/48)), l*(A*(-T/16 + U/48 + V/24) + B*(S/16 - U/24 - V ...
    /48) + C*(-S/48 + T/24 - V/48) + D*(-S/24 + T/48 + U/48)) + u*(A*(-5*T/48 + ...
     U/24 + V/16) + B*(5*S/48 - U/16 - V/24) + C*(-S/24 + T/16 - V/48) + D*(-S/ ...
    16 + T/24 + U/48)), l*(A*(T/24 - U/48 - V/48) + B*(-S/24 + U/24) + C*(S/48 - ...
     T/24 + V/48) + D*(S/48 - U/48)) + u*(A*(-T/24 + V/24) + B*(S/24 - U/48 - V ...
    /48) + C*(T/48 - V/48) + D*(-S/24 + T/48 + U/48)), l*(A*(-T/48 + V/48) + B* ...
    (S/48 - U/48) + C*(T/48 - V/48) + D*(-S/48 + U/48)) + u*(A*(-T/16 + V/16) + ...
     B*(S/16 - U/16) + C*(T/16 - V/16) + D*(-S/16 + U/16)), l*(A*(-T/24 + U/48  ...
    + V/48) + B*(S/24 - U/24) + C*(-S/48 + T/24 - V/48) + D*(-S/48 + U/48)) + u ...
    *(A*(-T/48 - U/48 + V/24) + B*(S/48 - U/48) + C*(S/48 + T/48 - V/24) + D*(- ...
    S/24 + U/24)), l*(A*(T/48 - V/48) + B*(-S/48 + U/48) + C*(-T/48 + V/48) + D ...
    *(S/48 - U/48)) + u*(A*(-U/48 + V/48) + B*(U/48 - V/48) + C*(S/48 - T/48) + ...
     D*(-S/48 + T/48)), l*(A*(-T/24 + V/24) + B*(S/24 - U/48 - V/48) + C*(T/48  ...
    - V/48) + D*(-S/24 + T/48 + U/48)) + u*(A*(T/48 + U/48 - V/24) + B*(-S/48 + ...
     U/48) + C*(-S/48 - T/48 + V/24) + D*(S/24 - U/24)); 0, l*(A*(T/24 + U/48 - ...
     V/16) + B*(-S/24 + U/48 + V/48) + C*(-S/48 - T/48 + V/24) + D*(S/16 - T/48  ...
    - U/24)) + u*(A*(7*T/48 + U/48 - V/6) + B*(-7*S/48 + U/12 + V/16) + C*(-S ...
    /48 - T/12 + 5*V/48) + D*(S/6 - T/16 - 5*U/48)), l*(A*(-T/24 + V/24) + B*( ...
    S/24 - U/48 - V/48) + C*(T/48 - V/48) + D*(-S/24 + T/48 + U/48)) + u*(A*(T/ ...
    24 - U/48 - V/48) + B*(-S/24 + U/24) + C*(S/48 - T/24 + V/48) + D*(S/48 - U/ ...
    48)), l*(A*(T/48 - V/48) + B*(-S/48 + U/48) + C*(-T/48 + V/48) + D*(S/48 -  ...
    U/48)) + u*(A*(-T/48 + U/48) + B*(S/48 - V/48) + C*(-S/48 + V/48) + D*(T/48 ...
     - U/48)), l*(A*(-T/48 - U/48 + V/24) + B*(S/48 - U/48) + C*(S/48 + T/48 -  ...
    V/24) + D*(-S/24 + U/24)) + u*(A*(-T/24 + U/48 + V/48) + B*(S/24 - U/24) +  ...
    C*(-S/48 + T/24 - V/48) + D*(-S/48 + U/48)), l*(A*(-T/48 + V/48) + B*(S/48  ...
    - U/48) + C*(T/48 - V/48) + D*(-S/48 + U/48)) + u*(A*(-T/16 + V/16) + B*(S ...
    /16 - U/16) + C*(T/16 - V/16) + D*(-S/16 + U/16)), l*(A*(T/48 + U/48 - V/24) ...
     + B*(-S/48 + U/48) + C*(-S/48 - T/48 + V/24) + D*(S/24 - U/24)) + u*(A*(- ...
    T/24 + V/24) + B*(S/24 - U/48 - V/48) + C*(T/48 - V/48) + D*(-S/24 + T/48 +  ...
    U/48)), l*(A*(-T/24 - U/48 + V/16) + B*(S/24 - U/48 - V/48) + C*(S/48 + T/48 ...
     - V/24) + D*(-S/16 + T/48 + U/24)) + u*(A*(-T/16 - U/24 + 5*V/48) + B*(S/ ...
    16 - U/48 - V/24) + C*(S/24 + T/48 - V/16) + D*(-5*S/48 + T/24 + U/16)); 0,  ...
    0, l*(A*(T/16 - U/48 - V/24) + B*(-S/16 + U/24 + V/48) + C*(S/48 - T/24 + V ...
    /48) + D*(S/24 - T/48 - U/48)) + u*(A*(T/6 - U/16 - 5*V/48) + B*(-S/6 + 7 ...
    *U/48 + V/48) + C*(S/16 - 7*T/48 + V/12) + D*(5*S/48 - T/48 - U/12)), l*(A* ...
    (-T/24 + U/48 + V/48) + B*(S/24 - U/24) + C*(-S/48 + T/24 - V/48) + D*(-S/48 ...
     + U/48)) + u*(A*(-T/24 + U/48 + V/48) + B*(S/24 - U/24) + C*(-S/48 + T/24  ...
    - V/48) + D*(-S/48 + U/48)), l*(A*(T/48 - V/48) + B*(-S/48 + U/48) + C*(-T ...
    /48 + V/48) + D*(S/48 - U/48)) + u*(A*(U/48 - V/48) + B*(-U/48 + V/48) + C* ...
    (-S/48 + T/48) + D*(S/48 - T/48)), l*(A*(T/24 - U/48 - V/48) + B*(-S/24 + U ...
    /24) + C*(S/48 - T/24 + V/48) + D*(S/48 - U/48)) + u*(A*(-T/48 + V/48) + B* ...
    (S/48 - U/24 + V/48) + C*(T/24 - V/24) + D*(-S/48 - T/48 + U/24)), l*(A*(-T ...
    /48 + V/48) + B*(S/48 - U/48) + C*(T/48 - V/48) + D*(-S/48 + U/48)) + u*(A* ...
    (-T/16 + V/16) + B*(S/16 - U/16) + C*(T/16 - V/16) + D*(-S/16 + U/16)), l*( ...
    A*(T/24 - V/24) + B*(-S/24 + U/48 + V/48) + C*(-T/48 + V/48) + D*(S/24 - T/ ...
    48 - U/48)) + u*(A*(T/48 - V/48) + B*(-S/48 + U/24 - V/48) + C*(-T/24 + V/24 ...
    ) + D*(S/48 + T/48 - U/24)); 0, 0, 0, l*(A*(T/24 - U/48 - V/48) + B*(-S/24 ...
     + U/16 - V/48) + C*(S/48 - T/16 + V/24) + D*(S/48 + T/48 - U/24)) + u*(A*( ...
    7*T/48 - U/16 - V/12) + B*(-7*S/48 + U/6 - V/48) + C*(S/16 - T/6 + 5*V/48) ...
     + D*(S/12 + T/48 - 5*U/48)), l*(A*(-T/48 + V/48) + B*(S/48 - U/24 + V/48)  ...
    + C*(T/24 - V/24) + D*(-S/48 - T/48 + U/24)) + u*(A*(T/24 - U/48 - V/48) +  ...
    B*(-S/24 + U/24) + C*(S/48 - T/24 + V/48) + D*(S/48 - U/48)), l*(A*(-T/24 + ...
     U/48 + V/48) + B*(S/24 - U/16 + V/48) + C*(-S/48 + T/16 - V/24) + D*(-S/48  ...
    - T/48 + U/24)) + u*(A*(-T/16 + U/24 + V/48) + B*(S/16 - 5*U/48 + V/24) + C ...
    *(-S/24 + 5*T/48 - V/16) + D*(-S/48 - T/24 + U/16)), l*(A*(T/48 - V/48) + B ...
    *(-S/48 + U/24 - V/48) + C*(-T/24 + V/24) + D*(S/48 + T/48 - U/24)) + u*(A* ...
    (T/24 - V/24) + B*(-S/24 + U/48 + V/48) + C*(-T/48 + V/48) + D*(S/24 - T/48  ...
    - U/48)), l*(A*(-T/48 + V/48) + B*(S/48 - U/48) + C*(T/48 - V/48) + D*(-S/ ...
    48 + U/48)) + u*(A*(-T/16 + V/16) + B*(S/16 - U/16) + C*(T/16 - V/16) + D*( ...
    -S/16 + U/16)); 0, 0, 0, 0, l*(A*(T/48 + U/48 - V/24) + B*(-S/48 + U/24 -  ...
    V/48) + C*(-S/48 - T/24 + V/16) + D*(S/24 + T/48 - U/16)) + u*(A*(T/12 + U/ ...
    48 - 5*V/48) + B*(-S/12 + 7*U/48 - V/16) + C*(-S/48 - 7*T/48 + V/6) + D*(5 ...
    *S/48 + T/16 - U/6)), l*(A*(T/48 - V/48) + B*(-S/48 + U/24 - V/48) + C*(-T ...
    /24 + V/24) + D*(S/48 + T/48 - U/24)) + u*(A*(T/48 - V/48) + B*(-S/48 + U/24 ...
     - V/48) + C*(-T/24 + V/24) + D*(S/48 + T/48 - U/24)), l*(A*(-T/48 - U/48 + ...
     V/24) + B*(S/48 - U/24 + V/48) + C*(S/48 + T/24 - V/16) + D*(-S/24 - T/48 + ...
     U/16)) + u*(A*(-T/48 - U/24 + V/16) + B*(S/48 - U/16 + V/24) + C*(S/24 + T ...
    /16 - 5*V/48) + D*(-S/16 - T/24 + 5*U/48)), l*(A*(T/48 + U/48 - V/24) + B*( ...
    -S/48 + U/48) + C*(-S/48 - T/48 + V/24) + D*(S/24 - U/24)) + u*(A*(-T/48 +  ...
    V/48) + B*(S/48 - U/24 + V/48) + C*(T/24 - V/24) + D*(-S/48 - T/48 + U/24)); ...
     0, 0, 0, 0, 0, l*(A*(T/24 - U/48 - V/48) + B*(-S/24 + U/16 - V/48) + C*( ...
    S/48 - T/16 + V/24) + D*(S/48 + T/48 - U/24)) + u*(A*(5*T/48 - U/48 - V/12)  ...
    + B*(-5*S/48 + U/6 - V/16) + C*(S/48 - T/6 + 7*V/48) + D*(S/12 + T/16 - 7 ...
    *U/48)), l*(A*(-T/48 + V/48) + B*(S/48 - U/24 + V/48) + C*(T/24 - V/24) + D ...
    *(-S/48 - T/48 + U/24)) + u*(A*(T/48 + U/48 - V/24) + B*(-S/48 + U/48) + C* ...
    (-S/48 - T/48 + V/24) + D*(S/24 - U/24)), l*(A*(T/48 - V/48) + B*(-S/48 + U ...
    /48) + C*(-T/48 + V/48) + D*(S/48 - U/48)) + u*(A*(T/48 - U/48) + B*(-S/48  ...
    + V/48) + C*(S/48 - V/48) + D*(-T/48 + U/48)); 0, 0, 0, 0, 0, 0, l*(A*(T ...
    /48 + U/48 - V/24) + B*(-S/48 + U/24 - V/48) + C*(-S/48 - T/24 + V/16) + D*( ...
    S/24 + T/48 - U/16)) + u*(A*(T/12 + U/16 - 7*V/48) + B*(-S/12 + 5*U/48 - V/ ...
    48) + C*(-S/16 - 5*T/48 + V/6) + D*(7*S/48 + T/48 - U/6)), l*(A*(-T/48 -  ...
    U/48 + V/24) + B*(S/48 - U/48) + C*(S/48 + T/48 - V/24) + D*(-S/24 + U/24))  ...
    + u*(A*(-T/48 - U/48 + V/24) + B*(S/48 - U/48) + C*(S/48 + T/48 - V/24) + D ...
    *(-S/24 + U/24)); 0, 0, 0, 0, 0, 0, 0, l*(A*(T/24 + U/48 - V/16) + B*(-S ...
    /24 + U/48 + V/48) + C*(-S/48 - T/48 + V/24) + D*(S/16 - T/48 - U/24)) + u*( ...
    A*(5*T/48 + U/16 - V/6) + B*(-5*S/48 + U/12 + V/48) + C*(-S/16 - T/12 + 7* ...
    V/48) + D*(S/6 - T/48 - 7*U/48))];
end

function [K] = crunch_serindipity(A, B, C, D, E, F, G, H, ...
                                  S, T, U, V, W, X, Y, Z, u, l)
  K = [];
end

